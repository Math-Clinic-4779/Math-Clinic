from __future__ import division, print_function
import pandas as pd
import numpy as np
from sklearn import manifold
import matplotlib.pyplot as plt
import skfuzzy as fuzz
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

# The code we use from OR-Tools
def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] = distance_matrix
    data['num_vehicles'] = 1
    data['depot'] = 0
    data['order'] = ary
    return data


def print_solution(data, manager, routing, solution):
    """Prints solution on console."""
    max_route_distance = 0
    order = data['order']
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = ''.format(vehicle_id)
        route_distance = 0
        while not routing.IsEnd(index):
            plan_output += ' {} -> '.format(order[index])
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += '{}\n'.format(manager.IndexToNode(index))
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        print(plan_output)
        max_route_distance = max(route_distance, max_route_distance)




def main():
    """Solve the CVRP problem."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)


    # Create and register a transit callback.
    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add Distance constraint.
    dimension_name = 'Distance'
    routing.AddDimension(
        transit_callback_index,
        0,  # no slack
        3000,  # vehicle maximum travel distance
        True,  # start cumul to zero
        dimension_name)
    distance_dimension = routing.GetDimensionOrDie(dimension_name)
    distance_dimension.SetGlobalSpanCostCoefficient(100)

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    if solution:
        print_solution(data, manager, routing, solution)


if __name__ == '__main__':
   
    # the basic information we need (maybe we can get the information from the user after having a full-develped user interface)
    nlandfill = 5
    nyard = 4
    ndriver = 10

    # read the data we need and between '' input the file of the distance matrix
    type = pd.read_csv(r'', skiprows=1)
    distance_matrix = pd.read_csv(r'', skiprows=1)

    data_size = type.shape[0] - nlandfill - nyard

    # modify the distance matrix as the method we mentioned in the report
    for i in range(nlandfill + nyard, type.shape[0]):
        for j in range(nlandfill + nyard + 1, type.shape[0] + 1):
            if (type.iloc[[i], [5]].values == type.iloc[[j - 1], [5]].values and i != j - 1):
                real_distance = 1000000000
                for x in range(nlandfill):
                    temp = distance_matrix.iloc[[i], [x]].values + distance_matrix.iloc[[j - 1], [x]].values
                    if temp < real_distance:
                        real_distance = temp
                distance_matrix.iloc[[i], [j]] = real_distance

    distance_matrix.drop(columns=['ID'], inplace=True)
    distance_matrix.drop(columns=['1', '2', '3', '4', '5', '6', '7', '8', '9'], inplace=True)
    distance_matrix.drop([0, 1, 2, 3, 4, 5, 6, 7, 8], inplace=True)
    
    # find the routine for the driver who ride the 6 size dumpster truck
    count = []
    ary = []
    distance_matrix_left = distance_matrix.copy(deep = True)
    for i in range (nlandfill + nyard, type.shape[0]):
        if (type.iloc[[i], [6]].values == ['6'] or type.iloc[[i], [6]].values == ["6lid"]):
            distance_matrix_left.drop(columns=[str(i + 1)], inplace=True)
            distance_matrix_left.drop([i], inplace=True)
            ary.append(i)
        else:
            count.append(i + 1)
            distance_matrix.drop(columns=[str(i + 1)], inplace=True)
            distance_matrix.drop([i], inplace=True)

    distance_matrix = np.array(distance_matrix)

    print("Driver for the size 6 dumpster:", 1)
    main()

    origin_distance_matrix = distance_matrix_left.copy(deep = True)

    distance_matrix = origin_distance_matrix.copy(deep = True)
    
    # apply mds to change the distance matrix to 2D coordinates
    mds = manifold.MDS(n_components=2, dissimilarity="precomputed", random_state=6)
    results = mds.fit(distance_matrix.values)

    obs = distance_matrix.columns
    coords = results.embedding_

    fig = plt.figure(figsize=(12, 10))

    plt.subplots_adjust(bottom=0.1)
    plt.scatter(coords[:, 0], coords[:, 1])

    # apply fuzzy cmeans clustering to get the desired clusters
    for label, x, y in zip(obs, coords[:, 0], coords[:, 1]):
        plt.annotate(
            label,
            xy=(x, y),
            xytext=(-20, 20),
            textcoords='offset points'
        )

    coords = np.vstack((coords[:, 0], coords[:, 1]))

    cntr, u_orig, _, _, _, _, _ = fuzz.cluster.cmeans(
        coords, ndriver - 1, 2, error=0.005, maxiter=1000000)

    fig2, ax2 = plt.subplots()
    ax2.set_title('Trained model')
    for j in range(ndriver - 1):
        ax2.plot(coords[0, u_orig.argmax(axis=0) == j],
                 coords[1, u_orig.argmax(axis=0) == j], 'o',
                 label='series ' + str(j))

    ax2.legend()
    # for each cluster run the code from or tools to get the results 
    for a in range (ndriver - 1):
        distance_matrix = origin_distance_matrix.copy(deep = True)
        x1 = obs[u_orig.argmax(axis=0) == a]
        ary = []
        for i in range(x1.size):
            ary.append(int(obs[u_orig.argmax(axis=0) == a][i]))

        for i in range(nlandfill + nyard + 1, type.shape[0] + 1):
            if i not in ary and i in count:
                distance_matrix.drop(columns=[str(i)], inplace=True)
                distance_matrix.drop([i - 1], inplace=True)

        distance_matrix = np.array(distance_matrix)
        # for i in range(len(x1)):
        #    print([x1[i],y1[i]])
        print("Driver:", a + 2)

        main()

    plt.show()
